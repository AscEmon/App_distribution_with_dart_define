plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')

// Define Dart environment variables, initially setting APP_FLAVOR based on the 'mode' property
def dartEnvironmentVariables = [
    APP_FLAVOR: project.hasProperty('mode')
]

// Check if 'dart-defines' property is present
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables +
        project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                // Decode each entry from base64 and split into key-value pairs
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                // If the key is 'mode', set APP_FLAVOR property in the project extension
                if (pair.first() == 'mode') {
                  project.ext.APP_FLAVOR = pair.last()
                }
                // Return key-value pair
                [(pair.first()): pair.last()]
            }
}

// (Optional)
// In Flutter for Android builds, there are two folders: 'apk' and 'flutter-apk.'
// As per my knowledge, the APKs in both folders are the same. However, if you prefer using 'flutter-apk,' 
// you can copy the APKs from the 'apk' folder to 'flutter-apk.'
// Please note that the 'flutter-apk' folder may not contain APKs after cleaning the project. 
// You'll see the APKs after the second build But you get modified apk altime in apk/release folder.

def renamePath = { outputFileName ->
    gradle.projectsEvaluated {
        tasks.whenObjectAdded { task ->
            task.doLast {
                // Locate the Flutter APK directory and rename the app-release.apk file
                def flutterApkDir = new File("${project.buildDir}/outputs/flutter-apk/app-release.apk")
                if (flutterApkDir.exists()) {
                    flutterApkDir.renameTo(new File("${project.buildDir}/outputs/flutter-apk/${outputFileName}"))
                }
            }
        }
    }
}

// Define a function to determine the app flavor based on the APP_FLAVOR property
def appFlavor() {
  if (project.hasProperty('APP_FLAVOR')) {
    return "${project.ext.APP_FLAVOR}_"
  }
}
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.app_distribution_with_dart_define"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.app_distribution_with_dart_define"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    if(appFlavor() != null){
                         def appName = variant.getMergedFlavor().applicationId
                         int lastIndex = appName.lastIndexOf('.')
                         def modifiedAppName = lastIndex != -1 ? appName.substring(lastIndex + 1) : appName
                         outputFileName = "${modifiedAppName}_${appFlavor()}${flutterVersionName}(${flutterVersionCode}).apk"
                         // Optional 
                         // renamePath(outputFileName)
                    }
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
